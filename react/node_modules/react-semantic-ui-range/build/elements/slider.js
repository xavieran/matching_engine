'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _rangeCss = require('./range.css.js');

var _rangeCss2 = _interopRequireDefault(_rangeCss);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Slider = function (_Component) {
    _inherits(Slider, _Component);

    function Slider(props) {
        _classCallCheck(this, Slider);

        var _this = _possibleConstructorReturn(this, (Slider.__proto__ || Object.getPrototypeOf(Slider)).call(this, props));

        _this.state = {
            value: _this.props.settings.start,
            position: 0,
            offset: 10,
            precision: 0,
            mouseDown: false
        };
        _this.determinePosition = _this.determinePosition.bind(_this);
        _this.rangeMouseUp = _this.rangeMouseUp.bind(_this);
        return _this;
    }

    _createClass(Slider, [{
        key: 'componentDidMount',
        value: function componentDidMount() {
            this.determinePrecision();
            this.determinePosition(this.state.value);
            window.addEventListener("mouseup", this.rangeMouseUp);
        }
    }, {
        key: 'determinePrecision',
        value: function determinePrecision() {
            var split = String(this.props.settings.step).split('.');
            var decimalPlaces = void 0;
            if (split.length == 2) {
                decimalPlaces = split[1].length;
            } else {
                decimalPlaces = 0;
            }
            this.setState({
                precision: Math.pow(10, decimalPlaces)
            });
        }
    }, {
        key: 'determineValue',
        value: function determineValue(startPos, endPos, currentPos) {
            var ratio = (currentPos - startPos) / (endPos - startPos);
            var range = this.props.settings.max - this.props.settings.min;
            var difference = Math.round(ratio * range / this.props.settings.step) * this.props.settings.step;
            // Use precision to avoid ugly Javascript floating point rounding issues
            // (like 35 * .01 = 0.35000000000000003)
            difference = Math.round(difference * this.state.precision) / this.state.precision;
            return difference + this.props.settings.min;
        }
    }, {
        key: 'determinePosition',
        value: function determinePosition(value) {
            var ratio = (value - this.props.settings.min) / (this.props.settings.max - this.props.settings.min);
            var trackFillLeft = _reactDom2.default.findDOMNode(this.trackFill).getBoundingClientRect().left;
            var innerLeft = _reactDom2.default.findDOMNode(this.inner).getBoundingClientRect().left;
            var position = Math.round(ratio * this.inner.offsetWidth) + trackFillLeft - innerLeft - this.state.offset;
            this.setState({
                position: position
            });
        }
    }, {
        key: 'setValue',
        value: function setValue(value, triggeredByUser) {
            if (typeof triggeredByUser === 'undefined') {
                triggeredByUser = true;
            }
            if (this.state.value !== value) {
                /*if(this.props.settings.input) {
                    $(this.props.settings.input).val(value);
                }*/
                if (this.props.settings.onChange) {
                    this.props.settings.onChange(value, { triggeredByUser: triggeredByUser });
                }
                this.setState({
                    value: value
                });
            }
        }
    }, {
        key: 'setValuePosition',
        value: function setValuePosition(val, triggeredByUser) {
            if (typeof triggeredByUser === 'undefined') {
                triggeredByUser = true;
            }
            if (val <= this.props.settings.max && val >= this.props.settings.min) {
                var position = this.determinePosition(val);
                this.setValue(val, triggeredByUser);
            }
        }
    }, {
        key: 'setPosition',
        value: function setPosition(val) {
            this.setState({
                position: val
            });
        }
    }, {
        key: 'rangeMouseDown',
        value: function rangeMouseDown(isTouch, e) {
            e.stopPropagation();
            if (!this.props.disabled) {
                e.preventDefault();
                this.setState({
                    mouseDown: true
                });
                var innerBoundingClientRect = _reactDom2.default.findDOMNode(this.inner).getBoundingClientRect();
                this.innerLeft = innerBoundingClientRect.left;
                this.innerRight = this.innerLeft + this.inner.offsetWidth;
                var pageX = void 0;
                e.pageX ? pageX = e.pageX : console.log("PageX undefined");
                var value = this.determineValue(this.innerLeft, this.innerRight, pageX);
                if (pageX >= this.innerLeft && pageX <= this.innerRight) {
                    if (value >= this.props.settings.min && value <= this.props.settings.max) {
                        if (this.props.discrete) {
                            this.setValuePosition(value, false);
                        } else {
                            this.setPosition(pageX - this.innerLeft - this.state.offset);
                            this.setValue(value);
                        }
                    }
                }
            }
        }
    }, {
        key: 'rangeMouseMove',
        value: function rangeMouseMove(isTouch, e) {
            e.stopPropagation();
            e.preventDefault();
            if (this.state.mouseDown) {
                var pageX = void 0;
                e.pageX ? pageX = e.pageX : console.log("PageX undefined");
                var value = this.determineValue(this.innerLeft, this.innerRight, pageX);
                if (pageX >= this.innerLeft && pageX <= this.innerRight) {
                    if (value >= this.props.settings.min && value <= this.props.settings.max) {
                        if (this.props.discrete) {
                            this.setValuePosition(value, false);
                        } else {
                            this.setPosition(pageX - this.innerLeft - this.state.offset);
                            this.setValue(value);
                        }
                    }
                }
            }
        }
    }, {
        key: 'rangeMouseUp',
        value: function rangeMouseUp() {
            this.setState({
                mouseDown: false
            });
        }
    }, {
        key: 'componentWillUnmount',
        value: function componentWillUnmount() {
            this.inner = undefined;
            this.innerLeft = undefined;
            this.innerRight = undefined;
            window.removeEventListener("mouseup", this.rangeMouseUp);
        }
    }, {
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps(nextProps) {
            if (nextProps.value !== this.state.value) {
                this.setValuePosition(nextProps.value, true);
            }
        }
    }, {
        key: 'render',
        value: function render() {
            var _this2 = this;

            return _react2.default.createElement(
                'div',
                null,
                _react2.default.createElement(
                    'div',
                    {
                        style: _extends({}, _rangeCss2.default.range, this.props.disabled ? _rangeCss2.default.disabled : {}, this.props.style),
                        onMouseDown: this.rangeMouseDown.bind(this, false),
                        onMouseMove: this.rangeMouseMove.bind(this, false),
                        onMouseUp: this.rangeMouseUp.bind(this, false),
                        onTouchStart: this.rangeMouseDown.bind(this, true)
                    },
                    _react2.default.createElement(
                        'div',
                        { className: 'semantic_ui_range_inner', ref: function ref(inner) {
                                _this2.inner = inner;
                            }, style: _rangeCss2.default.inner },
                        _react2.default.createElement('div', { style: _extends({}, _rangeCss2.default.track, this.props.inverted ? _rangeCss2.default.invertedTrack : {})
                        }),
                        _react2.default.createElement('div', { ref: function ref(trackFill) {
                                _this2.trackFill = trackFill;
                            }, style: _extends({}, _rangeCss2.default.trackFill, this.props.inverted ? _rangeCss2.default.invertedTrackFill : {}, { width: this.state.position + this.state.offset + "px" }, _rangeCss2.default[this.props.inverted ? "inverted-" + this.props.color : this.props.color], this.props.disabled ? _rangeCss2.default.disabledTrackFill : {})
                        }),
                        _react2.default.createElement('div', { style: _extends({}, _rangeCss2.default.thumb, { left: this.state.position + "px" }) })
                    )
                )
            );
        }
    }]);

    return Slider;
}(_react.Component);

exports.default = Slider;


Slider.defaultProps = {
    color: 'red',
    settings: {
        min: 0,
        max: 10,
        step: 1,
        start: 0
    }
};

Slider.propTypes = {
    settings: _propTypes2.default.shape({
        min: _propTypes2.default.number,
        max: _propTypes2.default.number,
        step: _propTypes2.default.number,
        start: _propTypes2.default.number,
        onChange: _propTypes2.default.func
    }),
    color: _propTypes2.default.string,
    inverted: _propTypes2.default.bool
};
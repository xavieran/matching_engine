{"ast":null,"code":"import _classCallCheck from \"/html/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/html/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/html/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/html/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/html/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/html/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Redirect } from 'react-router';\nimport { Route, BrowserRouter as Router } from 'react-router-dom';\nimport ExchangeInterface from './exchange_interface.js';\nimport TraderInterface from './trader_interface.jsx';\nimport Login from './login_page.js';\nimport './index.css';\n\nvar Root =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Root, _React$Component);\n\n  function Root(props) {\n    var _this;\n\n    _classCallCheck(this, Root);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Root).call(this, props));\n    _this.state = {\n      exchange_host: \"ws://le-chateaud:6789/\",\n      trader_id: null,\n      connected: null,\n      orderbook: {\n        bid: [],\n        ask: []\n      },\n      orders: [],\n      trades: [],\n      pnl: {}\n    };\n    return _this;\n  }\n\n  _createClass(Root, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      console.log(\"Mounted\");\n      this.exchange_interface = new ExchangeInterface(this.onopen.bind(this), this.onclose.bind(this), this.exchange_event.bind(this));\n      this.exchange_interface.connect(this.state.exchange_host);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      delete this.exchange_interface;\n    }\n  }, {\n    key: \"exchange_event\",\n    value: function exchange_event() {\n      console.log(\"Updating state\", this.exchange_interface);\n      this.setState({\n        exchange_host: this.exchange_host,\n        orderbook: this.exchange_interface.orderbook,\n        trades: this.exchange_interface.trades,\n        orders: this.exchange_interface.orders,\n        pnl: this.exchange_interface.pnl\n      });\n    }\n  }, {\n    key: \"onopen\",\n    value: function onopen(event) {\n      console.log(\"Received onopen\", event);\n      this.setState({\n        connected: true\n      });\n    }\n  }, {\n    key: \"onclose\",\n    value: function onclose(event) {\n      console.log(\"Received onclose\", event);\n      this.setState({\n        connected: false\n      });\n    }\n  }, {\n    key: \"connect\",\n    value: function connect() {\n      console.log(\"About to connect\");\n    }\n  }, {\n    key: \"send_order\",\n    value: function send_order(side, price, volume) {\n      this.exchange_interface.send_order(side, price, volume, this.state.trader_id);\n    }\n  }, {\n    key: \"send_cancel\",\n    value: function send_cancel(order_id) {\n      this.exchange_interface.send_cancel(order_id, this.state.trader_id);\n    }\n  }, {\n    key: \"login\",\n    value: function login(trader_id) {\n      console.log(\"Logging in as: \", trader_id);\n      this.exchange_interface.send_login(trader_id);\n      this.setState({\n        trader_id: trader_id\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(Router, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }, React.createElement(Route, {\n        exact: true,\n        path: \"/login\",\n        render: function render(props) {\n          return React.createElement(Login, Object.assign({}, props, {\n            login: _this2.login.bind(_this2),\n            connected: _this2.state.connected,\n            trader_id: _this2.state.trader_id,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 88\n            },\n            __self: this\n          }));\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }), React.createElement(Route, {\n        exact: true,\n        path: \"/TraderInterface\",\n        render: function render(props) {\n          if (_this2.state.trader_id == null) {\n            return React.createElement(Redirect, {\n              push: true,\n              to: \"/\",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 95\n              },\n              __self: this\n            });\n          } else {\n            return React.createElement(TraderInterface, {\n              send_order: _this2.send_order.bind(_this2),\n              send_cancel: _this2.send_cancel.bind(_this2),\n              orderbook: _this2.state.orderbook,\n              orders: _this2.state.orders,\n              trades: _this2.state.trades,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 97\n              },\n              __self: this\n            });\n          }\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return Root;\n}(React.Component);\n\nvar root = React.createElement(Root, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 111\n  },\n  __self: this\n});\nReactDOM.render(root, document.getElementById('root'));","map":{"version":3,"sources":["/html/src/index.js"],"names":["React","ReactDOM","Redirect","Route","BrowserRouter","Router","ExchangeInterface","TraderInterface","Login","Root","props","state","exchange_host","trader_id","connected","orderbook","bid","ask","orders","trades","pnl","console","log","exchange_interface","onopen","bind","onclose","exchange_event","connect","setState","event","side","price","volume","send_order","order_id","send_cancel","send_login","login","Component","root","render","document","getElementById"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Redirect } from 'react-router';\n\nimport { Route, BrowserRouter as Router } from 'react-router-dom'\n\nimport ExchangeInterface from './exchange_interface.js';\nimport TraderInterface from './trader_interface.jsx';\nimport Login from './login_page.js';\nimport './index.css';\n\nclass Root extends React.Component {\n    constructor(props){\n        super(props)\n        this.state = {\n            exchange_host: \"ws://le-chateaud:6789/\",\n            trader_id: null,\n            connected: null, \n            orderbook: {\n                bid: [],\n                ask: []\n            },\n            orders: [],\n            trades: [],\n            pnl: {}\n        }\n    }\n\n    componentDidMount() {\n        console.log(\"Mounted\")\n        this.exchange_interface = new ExchangeInterface(\n            this.onopen.bind(this),\n            this.onclose.bind(this),\n            this.exchange_event.bind(this))\n\n        this.exchange_interface.connect(this.state.exchange_host)\n    }\n\n    componentWillUnmount() {\n        delete this.exchange_interface\n    }\n\n    exchange_event(){\n        console.log(\"Updating state\", this.exchange_interface)\n        this.setState({\n            exchange_host: this.exchange_host,\n            orderbook: this.exchange_interface.orderbook,\n            trades: this.exchange_interface.trades,\n            orders: this.exchange_interface.orders,\n            pnl: this.exchange_interface.pnl\n        })\n    }\n\n    onopen(event){\n        console.log(\"Received onopen\", event);\n        this.setState({connected: true})\n    }\n\n    onclose(event){\n        console.log(\"Received onclose\", event);\n        this.setState({connected: false})\n    }\n\n    connect(){\n        console.log(\"About to connect\");\n    }\n\n    send_order(side, price, volume){\n        this.exchange_interface.send_order(side, price, volume, this.state.trader_id) \n    }\n\n    send_cancel(order_id){\n        this.exchange_interface.send_cancel(order_id, this.state.trader_id)\n    }\n\n    login(trader_id)\n    {\n        console.log(\"Logging in as: \", trader_id)\n        this.exchange_interface.send_login(trader_id)\n        this.setState({trader_id: trader_id})\n    }\n\n    render(){\n        return (\n          <Router>\n            <div>\n              <Route exact path=\"/login\" render={props => \n                <Login \n                  {...props} \n                  login={this.login.bind(this)}\n                  connected={this.state.connected}\n                  trader_id={this.state.trader_id} />} />\n              <Route exact path=\"/TraderInterface\" render={props => {\n                if (this.state.trader_id == null){\n                    return <Redirect push to=\"/\" />\n                } else {\n                    return <TraderInterface\n                      send_order={this.send_order.bind(this)}\n                      send_cancel={this.send_cancel.bind(this)}\n                      orderbook={this.state.orderbook}\n                      orders={this.state.orders}\n                      trades={this.state.trades}/>\n                }}}\n              />\n            </div>\n          </Router>\n        )\n    }\n}\n\nconst root = <Root/>\n\nReactDOM.render(root, document.getElementById('root'))\n"]},"metadata":{},"sourceType":"module"}
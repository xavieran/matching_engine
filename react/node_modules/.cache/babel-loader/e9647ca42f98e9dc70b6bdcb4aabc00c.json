{"ast":null,"code":"import _classCallCheck from \"/html/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/html/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport React from 'react';\n\nfunction uuidv4() {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n    var r = Math.random() * 16 | 0,\n        v = c === 'x' ? r : r & 0x3 | 0x8;\n    return v.toString(16);\n  });\n}\n\nvar ExchangeInterface =\n/*#__PURE__*/\nfunction () {\n  function ExchangeInterface(exchange_host) {\n    _classCallCheck(this, ExchangeInterface);\n\n    this.exchange_host = exchange_host;\n    this.websocket = null;\n  }\n\n  _createClass(ExchangeInterface, [{\n    key: \"render\",\n    value: function render() {\n      return null;\n    }\n  }, {\n    key: \"connect\",\n    value: function connect(host) {\n      this.websocket = new WebSocket(props.exchange_host), this.state.websocket.onopen = function (event) {\n        console.log(\"Opened connection\");\n      };\n    }\n  }, {\n    key: \"send\",\n    value: function send(data) {\n      this.state.websocket.send(JSON.stringify(data));\n    }\n  }, {\n    key: \"send_order\",\n    value: function send_order(side, price, volume, trader_id) {\n      var order = {\n        type: \"insert\",\n        trader_id: trader_id,\n        order_id: uuidv4(),\n        side: side,\n        price: price,\n        volume: volume\n      };\n      console.log(\"Sending order\", order);\n      this.send(order);\n    }\n  }, {\n    key: \"register_trader\",\n    value: function register_trader(trader_id) {\n      var message = {\n        type: \"sync_state\",\n        trader_id: trader_id\n      };\n      console.log(\"Sending trader_id\", trader_id);\n      this.send(message);\n    }\n  }, {\n    key: \"send_cancel\",\n    value: function send_cancel(order_id, trader_id) {\n      var cancel = {\n        type: \"cancel\",\n        trader_id: trader_id,\n        order_id: order_id\n      };\n      console.log(\"Sending cancel\", cancel);\n      this.send(cancel);\n    }\n  }]);\n\n  return ExchangeInterface;\n}();\n\nexport default ExchangeInterface;","map":{"version":3,"sources":["/html/src/exchange_interface.js"],"names":["React","uuidv4","replace","c","r","Math","random","v","toString","ExchangeInterface","exchange_host","websocket","host","WebSocket","props","state","onopen","event","console","log","data","send","JSON","stringify","side","price","volume","trader_id","order","type","order_id","message","cancel"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,SAASC,MAAT,GAAiB;AACb,SAAO,uCAAuCC,OAAvC,CAA+C,OAA/C,EAAwD,UAASC,CAAT,EAAY;AACvE,QAAIC,CAAC,GAAGC,IAAI,CAACC,MAAL,KAAgB,EAAhB,GAAqB,CAA7B;AAAA,QAAgCC,CAAC,GAAGJ,CAAC,KAAK,GAAN,GAAYC,CAAZ,GAAiBA,CAAC,GAAG,GAAJ,GAAU,GAA/D;AACN,WAAOG,CAAC,CAACC,QAAF,CAAW,EAAX,CAAP;AACE,GAHO,CAAP;AAIH;;IAEKC,iB;;;AACF,6BAAYC,aAAZ,EAA0B;AAAA;;AACtB,SAAKA,aAAL,GAAqBA,aAArB;AACA,SAAKC,SAAL,GAAiB,IAAjB;AACH;;;;6BAEO;AACJ,aAAO,IAAP;AACH;;;4BAEOC,I,EAAK;AACT,WAAKD,SAAL,GAAiB,IAAIE,SAAJ,CAAcC,KAAK,CAACJ,aAApB,CAAjB,EAEA,KAAKK,KAAL,CAAWJ,SAAX,CAAqBK,MAArB,GAA8B,UAACC,KAAD,EAAW;AAErCC,QAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACH,OALD;AAMH;;;yBAEIC,I,EAAK;AACN,WAAKL,KAAL,CAAWJ,SAAX,CAAqBU,IAArB,CAA0BC,IAAI,CAACC,SAAL,CAAeH,IAAf,CAA1B;AACH;;;+BAEUI,I,EAAMC,K,EAAOC,M,EAAQC,S,EAAU;AACtC,UAAIC,KAAK,GAAG;AACRC,QAAAA,IAAI,EAAC,QADG;AAERF,QAAAA,SAAS,EAAEA,SAFH;AAGRG,QAAAA,QAAQ,EAAE7B,MAAM,EAHR;AAIRuB,QAAAA,IAAI,EAAEA,IAJE;AAKRC,QAAAA,KAAK,EAAEA,KALC;AAMRC,QAAAA,MAAM,EAAEA;AANA,OAAZ;AAOAR,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BS,KAA7B;AACA,WAAKP,IAAL,CAAUO,KAAV;AACH;;;oCAEeD,S,EAAU;AACtB,UAAII,OAAO,GAAG;AACVF,QAAAA,IAAI,EAAE,YADI;AAEVF,QAAAA,SAAS,EAAEA;AAFD,OAAd;AAKAT,MAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiCQ,SAAjC;AACA,WAAKN,IAAL,CAAUU,OAAV;AACH;;;gCAEWD,Q,EAAUH,S,EAAU;AAC5B,UAAIK,MAAM,GAAG;AAClBH,QAAAA,IAAI,EAAC,QADa;AAElBF,QAAAA,SAAS,EAAEA,SAFO;AAGTG,QAAAA,QAAQ,EAAEA;AAHD,OAAb;AAIAZ,MAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8Ba,MAA9B;AACA,WAAKX,IAAL,CAAUW,MAAV;AACH;;;;;;AAIL,eAAevB,iBAAf","sourcesContent":["import React from 'react';\n\nfunction uuidv4(){\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n        var r = Math.random() * 16 | 0, v = c === 'x' ? r : (r & 0x3 | 0x8);\n\t\treturn v.toString(16);\n\t  });\n}\n\nclass ExchangeInterface {\n    constructor(exchange_host){\n        this.exchange_host = exchange_host\n        this.websocket = null;\n    }\n\n    render(){\n        return null;\n    }\n\n    connect(host){\n        this.websocket = new WebSocket(props.exchange_host),\n\n        this.state.websocket.onopen = (event) => {\n\n            console.log(\"Opened connection\");\n        }\n    }\n\n    send(data){\n        this.state.websocket.send(JSON.stringify(data));\n    }\n\n    send_order(side, price, volume, trader_id){\n        let order = {\n            type:\"insert\", \n            trader_id: trader_id,\n            order_id: uuidv4(),\n            side: side,\n            price: price,\n            volume: volume}\n        console.log(\"Sending order\", order);\n        this.send(order);\n    }\n\n    register_trader(trader_id){\n        let message = {\n            type: \"sync_state\",\n            trader_id: trader_id\n        }\n\n        console.log(\"Sending trader_id\", trader_id);\n        this.send(message);\n    }\n\n    send_cancel(order_id, trader_id){\n        let cancel = {\n\t\t\ttype:\"cancel\",\n\t\t\ttrader_id: trader_id, \n            order_id: order_id}\n        console.log(\"Sending cancel\", cancel);\n        this.send(cancel)\n    }\n\n}\n\nexport default ExchangeInterface\n"]},"metadata":{},"sourceType":"module"}